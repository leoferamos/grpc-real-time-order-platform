services:
  # Certificate Generator
  cert-generator:
    build:
      context: ./infra/cert-generator
      dockerfile: Dockerfile
    container_name: cert-generator
    volumes:
      - certs:/certs
    networks:
      - grpc-network

  # API Gateway
  gateway-api:
    build:
      context: .
      dockerfile: ./gateway-api/Dockerfile
    container_name: gateway-api
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - GRPC_CLIENT_ORDER_SERVICE_ADDRESS=static://order-service:9090
      - GRPC_CLIENT_PAYMENT_SERVICE_ADDRESS=static://payment-service:9091
      - CERTS_DIR=/certs
    volumes:
      - certs:/certs:ro
    networks:
      - grpc-network
    depends_on:
      cert-generator:
        condition: service_completed_successfully
      order-service:
        condition: service_started
      payment-service:
        condition: service_started
    restart: unless-stopped

  # Order Service 
  order-service:
    build:
      context: .
      dockerfile: ./services/order-service-java/Dockerfile
    container_name: order-service
    ports:
      - "9090:9090"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CERTS_DIR=/certs
    volumes:
      - certs:/certs:ro
    networks:
      - grpc-network
    depends_on:
      cert-generator:
        condition: service_completed_successfully
    restart: unless-stopped

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: ./services/payment-service-java/Dockerfile
    container_name: payment-service
    ports:
      - "9091:9091"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CERTS_DIR=/certs
    volumes:
      - certs:/certs:ro
    networks:
      - grpc-network
    depends_on:
      cert-generator:
        condition: service_completed_successfully
    restart: unless-stopped

volumes:
  certs:
    driver: local

networks:
  grpc-network:
    driver: bridge
    name: grpc-real-time-network
